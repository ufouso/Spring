<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
            http://www.springframework.org/schema/mvc   
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd   
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context-3.0.xsd   
            http://www.springframework.org/schema/aop   
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">  
   
   <!-- 单数据源配置c3p0 -->
   <!-- 引入配置文件 -->
   <context:property-placeholder location="classpath:jdbc.properties" />     
   <!-- 配置数据源 -->
   <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   		<property name="driverClass" value="${jdbc.driverClassName}" />  
        <property name="jdbcUrl" value="${jdbc.url}" />  
        <property name="user" value="${jdbc.username}" />  
        <property name="password" value="${jdbc.password}" />   
        <property name="maxPoolSize" value="${c3p0.pool.size.max}" />  
        <property name="minPoolSize" value="${c3p0.pool.size.min}" />  
        <property name="initialPoolSize" value="${c3p0.pool.size.ini}" />  
        <property name="acquireIncrement" value="${c3p0.pool.size.increment}" />
   </bean>         
   
      <!-- sessionFactory 将spring和mybatis整合 -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   		<property name="dataSource" ref="dataSource"/>
   		<!-- 第一种方法 自动扫描mapping.xml文件 -->
   		<property name="mapperLocations" value="classpath:com/xpp/test/mapper/*.xml"></property>  
   		<!-- 第二种方法，之后在mybatis-config.xml中配置各种日志和别的mapper  -->
   		<property name="configLocation" value="classpath:mybatis-config.xml"></property>  
   </bean>
   
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.xpp.test.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
   
      <!-- 声明事务管理组件，使用得是jdbc的事务管理 -->
 	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
 		<property name="dataSource" ref="dataSource"></property>
 	</bean>
	<!-- 开启事务注解扫描,proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
	如果proxy-target-class 属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
	如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理将起作用。
	proxy-target-class="true" -->
	<tx:annotation-driven transaction-manager="txManager" />
   
   
    <!-- 开启aop注解扫描 -->
 	<!-- 启动对@Aspectj的支持 true为cglib，false为jdk代理，为true的话，会导致拦截不了mybatis的mapper -->
 	<aop:aspectj-autoproxy proxy-target-class="false" />
   
      <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
   <context:component-scan base-package="com.xpp.test.*" />  
    
   <!-- 开启RequestMapping注解 --> 	
   <mvc:annotation-driven />
    
</beans>